/* eslint-disable prefer-arrow-callback */
/* eslint-disable no-case-declarations */
'use strict';

/// Global variables
/* global  */
let searchEngines = {};
let selection = '';
let targetUrl = '';
let lastAddressBarKeyword = '';
let historyItems, bookmarkItems;
let promptText = '';
let messageSent = false;
let CORS_API_URL;
let CORS_API_KEY;

/// Constants
// Debug
const debug = true;

// User agent for sidebar search results
const contextsearch_userAgent =
    'Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/12.0 Mobile/15A372 Safari/604.1';
const DEFAULT_SEARCH_ENGINES = 'defaultSearchEngines.json';
const googleLensUrl = 'https://lens.google.com/uploadbyurl?url=';
const googleReverseImageSearchUrl =
    'https://www.google.com/searchbyimage?sbisrc=1&safe=off&image_url=';
const chatGPTUrl = 'https://chat.openai.com/';
const base64chatGPT = '';
const googleBardUrl = 'https://bard.google.com/';
const base64bard = 'PHN2ZyB3aWR0aD0iMTA4MCIgaGVpZ2h0PSIxMDgwIiB2aWV3Qm94PSIwIDAgMTA4MCAxMDgwIiBmaWxsPSJub25lIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgo8cGF0aCBkPSJNNTE1LjA5IDcyNS44MjRMNDcyLjAwNiA4MjQuNTAzQzQ1NS40NDQgODYyLjQzNCA0MDIuOTU0IDg2Mi40MzQgMzg2LjM5MyA4MjQuNTAzTDM0My4zMDggNzI1LjgyNEMzMDQuOTY2IDYzOC4wMDYgMjM1Ljk1MyA1NjguMTA0IDE0OS44NjggNTI5Ljg5MkwzMS4yNzc5IDQ3Ny4yNTFDLTYuNDI2MDEgNDYwLjUxNSAtNi40MjU5NCA0MDUuNjY1IDMxLjI3NzkgMzg4LjkyOUwxNDYuMTY0IDMzNy45MzJDMjM0LjQ2MyAyOTguNzM3IDMwNC43MTQgMjI2LjI0NCAzNDIuNDAxIDEzNS40MzFMMzg2LjA0NCAzMC4yNjkzQzQwMi4yMzkgLTguNzU2MzcgNDU2LjE1OSAtOC43NTY0NiA0NzIuMzU1IDMwLjI2OTJMNTE1Ljk5OCAxMzUuNDMyQzU1My42ODUgMjI2LjI0NCA2MjMuOTM1IDI5OC43MzcgNzEyLjIzNCAzMzcuOTMyTDgyNy4xMjEgMzg4LjkyOUM4NjQuODI1IDQwNS42NjUgODY0LjgyNSA0NjAuNTE1IDgyNy4xMjEgNDc3LjI1MUw3MDguNTMgNTI5Ljg5MkM2MjIuNDQ2IDU2OC4xMDQgNTUzLjQzMyA2MzguMDA2IDUxNS4wOSA3MjUuODI0WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzI1MjVfNzc3KSIvPgo8cGF0aCBkPSJNOTE1LjQ4NSAxMDM2Ljk4TDkwMy4zNjcgMTA2NC43NUM4OTQuNDk5IDEwODUuMDggODY2LjM0OSAxMDg1LjA4IDg1Ny40ODEgMTA2NC43NUw4NDUuMzY0IDEwMzYuOThDODIzLjc2NSA5ODcuNDY1IDc4NC44NjIgOTQ4LjA0MiA3MzYuMzE4IDkyNi40NzVMNjk4Ljk4NyA5MDkuODg5QzY3OC44MDIgOTAwLjkyMSA2NzguODAyIDg3MS41NzggNjk4Ljk4NyA4NjIuNjFMNzM0LjIzMSA4NDYuOTUxQzc4NC4wMjMgODI0LjgyOSA4MjMuNjIzIDc4My45NDcgODQ0Ljg1MSA3MzIuNzVMODU3LjI5NCA3MDIuNzQxQzg2NS45NjYgNjgxLjgyNiA4OTQuODgyIDY4MS44MjYgOTAzLjU1NCA3MDIuNzQxTDkxNS45OTcgNzMyLjc1QzkzNy4yMjUgNzgzLjk0NyA5NzYuODI2IDgyNC44MjkgMTAyNi42MiA4NDYuOTUxTDEwNjEuODYgODYyLjYxQzEwODIuMDUgODcxLjU3OCAxMDgyLjA1IDkwMC45MjEgMTA2MS44NiA5MDkuODg5TDEwMjQuNTMgOTI2LjQ3NUM5NzUuOTg3IDk0OC4wNDIgOTM3LjA4MyA5ODcuNDY1IDkxNS40ODUgMTAzNi45OFoiIGZpbGw9InVybCgjcGFpbnQxX3JhZGlhbF8yNTI1Xzc3NykiLz4KPGRlZnM+CjxyYWRpYWxHcmFkaWVudCBpZD0icGFpbnQwX3JhZGlhbF8yNTI1Xzc3NyIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSg2NzAuNDQ3IDQ3NC4wMDYpIHJvdGF0ZSg3OC44NTgpIHNjYWxlKDY2NS41IDY2NS44MjQpIj4KPHN0b3Agc3RvcC1jb2xvcj0iIzFCQTFFMyIvPgo8c3RvcCBvZmZzZXQ9IjAuMDAwMSIgc3RvcC1jb2xvcj0iIzFCQTFFMyIvPgo8c3RvcCBvZmZzZXQ9IjAuMzAwMjIxIiBzdG9wLWNvbG9yPSIjNTQ4OUQ2Ii8+CjxzdG9wIG9mZnNldD0iMC41NDU1MjQiIHN0b3AtY29sb3I9IiM5QjcyQ0IiLz4KPHN0b3Agb2Zmc2V0PSIwLjgyNTM3MiIgc3RvcC1jb2xvcj0iI0Q5NjU3MCIvPgo8c3RvcCBvZmZzZXQ9IjEiIHN0b3AtY29sb3I9IiNGNDlDNDYiLz4KPC9yYWRpYWxHcmFkaWVudD4KPHJhZGlhbEdyYWRpZW50IGlkPSJwYWludDFfcmFkaWFsXzI1MjVfNzc3IiBjeD0iMCIgY3k9IjAiIHI9IjEiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiBncmFkaWVudFRyYW5zZm9ybT0idHJhbnNsYXRlKDY3MC40NDcgNDc0LjAwNikgcm90YXRlKDc4Ljg1OCkgc2NhbGUoNjY1LjUgNjY1LjgyNCkiPgo8c3RvcCBzdG9wLWNvbG9yPSIjMUJBMUUzIi8+CjxzdG9wIG9mZnNldD0iMC4wMDAxIiBzdG9wLWNvbG9yPSIjMUJBMUUzIi8+CjxzdG9wIG9mZnNldD0iMC4zMDAyMjEiIHN0b3AtY29sb3I9IiM1NDg5RDYiLz4KPHN0b3Agb2Zmc2V0PSIwLjU0NTUyNCIgc3RvcC1jb2xvcj0iIzlCNzJDQiIvPgo8c3RvcCBvZmZzZXQ9IjAuODI1MzcyIiBzdG9wLWNvbG9yPSIjRDk2NTcwIi8+CjxzdG9wIG9mZnNldD0iMSIgc3RvcC1jb2xvcj0iI0Y0OUM0NiIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM+Cjwvc3ZnPgo=';
const perplexityAIUrl = 'https://www.perplexity.ai/';
const base64perplexity = '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';
const llama2Url = 'https://huggingface.co/spaces/ysharma/Explore_llamav2_with_TGI';
const base64llama2 = '';
const claudeUrl = 'https://poe.com/Claude-instant';
const base64claude = '';
const assistantUrl = 'https://poe.com/Assistant';
const base64assistant = '';
const base64ContextSearchIcon =
    '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';
// Folder icon download link: https://icons8.com/icon/12160/folder
const base64FolderIcon = 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAABCUlEQVR4nO2VMWrDQBBFp8gRQhoFV5a0pM0Zci/fRAK7CcJd0gXcRfKALxFIZ4OdA+gbxZ1A3nU1A/4Pfv/f7OyuCCGEEDICS3lGJQ1q+UMtSEolC3FTvpZDcnFvErhM/vbyXiRwy9p4lMBQYPUAfGVAVwAabNMVPTazX3w+vaUJDOXb3L64jtLmPT4eX+MCw+Sty+pENrOfuICHtdGpUyj6uIB1Sb0eCoAnELhCV7FeEfASq/2UwWdU7ScNfmTqMxLDuiAooPZTBldI7ScNXmL1GbmHZ/RkXRJT2YZjXGBbrh0LNAkCoYCWe/OyOk55wO5lHhX4l/jOM2h4d7JOp2HyyeUJIYTcFWcLXG7i+rfwxwAAAABJRU5ErkJggg==';

// This is a RequestFilter: https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/webRequest/RequestFilter
// It matches tabs that aren't attached to a normal location (like a sidebar)
// It only matches embedded iframes
const requestFilter = {
    tabId: -1,
    types: ['main_frame'],
    urls: ['http://*/*', 'https://*/*'],
};

// Constants for translations
const titleMultipleSearchEngines = browser.i18n.getMessage(
    'titleMultipleSearchEngines'
);
const titleSiteSearch = browser.i18n.getMessage('titleSiteSearch');
const titleExactMatch = browser.i18n.getMessage('exactMatch');
const titleOptions = browser.i18n.getMessage('titleOptions');
const windowTitle = browser.i18n.getMessage('windowTitle');
const omniboxDescription = browser.i18n.getMessage('omniboxDescription');
const notifySearchEnginesLoaded = browser.i18n.getMessage(
    'notifySearchEnginesLoaded'
);
const notifySearchEngineAdded = browser.i18n.getMessage(
    'notifySearchEngineAdded'
);
const notifyUsage = browser.i18n.getMessage('notifyUsage');
const notifySearchEngineWithKeyword = browser.i18n.getMessage(
    'notifySearchEngineWithKeyword'
);
const notifyUnknown = browser.i18n.getMessage('notifyUnknown');
const notifySearchEngineUrlRequired = browser.i18n.getMessage(
    'notifySearchEngineUrlRequired'
);

/// Preferences - Default settings
let contextsearch_exactMatch = false;
let contextsearch_tabMode = 'openNewTab';
let contextsearch_optionsMenuLocation = 'bottom';
let contextsearch_openSearchResultsInNewTab = true;
let contextsearch_openSearchResultsInLastTab = false;
let contextsearch_makeNewTabOrWindowActive = false;
let contextsearch_openSearchResultsInNewWindow = false;
let contextsearch_openSearchResultsInSidebar = false;
let contextsearch_displayFavicons = true;
let contextsearch_quickIconGrid = false;
let contextsearch_closeGridOnMouseOut = true;
let contextsearch_disableAltClick = false;
let contextsearch_forceFaviconsReload = false;
let contextsearch_resetPreferences = false;
let contextsearch_forceSearchEnginesReload = false;
let contextsearch_siteSearch = 'Google';
let contextsearch_siteSearchUrl = 'https://www.google.com/search?q=';
let contextsearch_multiMode = 'multiNewWindow';
let contextsearch_privateMode = false;
let notificationsEnabled = false;

const defaultOptions = {
    exactMatch: contextsearch_exactMatch,
    tabMode: contextsearch_tabMode,
    tabActive: contextsearch_makeNewTabOrWindowActive,
    lastTab: contextsearch_openSearchResultsInLastTab,
    optionsMenuLocation: contextsearch_optionsMenuLocation,
    displayFavicons: contextsearch_displayFavicons,
    quickIconGrid: contextsearch_quickIconGrid,
    closeGridOnMouseOut: contextsearch_closeGridOnMouseOut,
    disableAltClick: contextsearch_disableAltClick,
    forceSearchEnginesReload: contextsearch_forceSearchEnginesReload,
    resetPreferences: contextsearch_resetPreferences,
    forceFaviconsReload: contextsearch_forceFaviconsReload,
    siteSearch: contextsearch_siteSearch,
    siteSearchUrl: contextsearch_siteSearchUrl,
    multiMode: contextsearch_multiMode,
    privateMode: contextsearch_privateMode
};

/// Handle Page Action click
browser.pageAction.onClicked.addListener(handlePageAction);

/// Add a mobile header to outgoing requests
browser.webRequest.onBeforeSendHeaders.addListener(
    rewriteUserAgentHeader,
    requestFilter,
    ['blocking', 'requestHeaders']
);

/*
Rewrite the User-Agent header to contextsearch_userAgent
*/
async function rewriteUserAgentHeader(e) {
    if (debug) console.log(e);
    if (!contextsearch_openSearchResultsInSidebar) {
        return {};
    }
    if (debug) {
        const activeTab = await browser.tabs.query({
            currentWindow: true,
            active: true,
        });
        console.log('Active tab: ');
        console.log(activeTab);
        console.log('Intercepted header:');
        console.log(e.requestHeaders);
    }
    for (const header of e.requestHeaders) {
        if (header.name.toLowerCase() === 'user-agent') {
            header.value = contextsearch_userAgent;
        }
    }
    if (debug) {
        console.log('Modified header:');
        console.log(e.requestHeaders);
    }
    return { requestHeaders: e.requestHeaders };
}

/// Handle Incoming Messages
// Functions used to handle incoming messages
function isActive(tab) {
    return tab.active;
}

function queryAllTabs() {
    return browser.tabs.query({ currentWindow: true });
}

async function handleDoSearch(data) {
    const id = data.id;
    if (debug) console.log('Search engine id: ' + id);
    if (debug) console.log(contextsearch_openSearchResultsInSidebar);
    if (contextsearch_openSearchResultsInSidebar) {
        searchUsing(id, null);
        return;
    }
    const tabs = await queryAllTabs();
    const activeTab = tabs.filter(isActive)[0];
    const lastTab = tabs[tabs.length - 1];
    let tabPosition = activeTab.index + 1;
    if (contextsearch_multiMode === 'multiAfterLastTab') {
        tabPosition = lastTab.index + 1;
    }
    if (id === 'multisearch') {
        processMultiTabSearch([], tabPosition);
        return;
    }
    if (contextsearch_openSearchResultsInLastTab) {
        tabPosition = lastTab.index + 1;
    }
    searchUsing(id, tabPosition);
}

async function handleReset() {
    const response = await reset();
    if (debug) console.log(response);
    sendMessageToOptionsPage(response, null);
}

async function handleSaveSearchEngines(data) {
    searchEngines = sortByIndex(data);
    if (debug) console.log(searchEngines);
    await browser.storage.local.clear();
    if (debug) console.log('Local storage cleared.');
    await saveSearchEnginesToLocalStorage(false);
    rebuildContextMenu();
}

async function handleAddNewSearchEngine(data) {
    const id = data.id;
    let domain;
    searchEngines[id] = data.searchEngine;
    searchEngines = sortByIndex(searchEngines);
    if (!(id.startsWith("separator-") || id.startsWith('chatgpt-'))) {
        domain = getDomain(data.searchEngine.url);
        if (debug) console.log(id, domain);
    }
    await addNewSearchEngine(id, domain);
}

async function handleAddNewPrompt(data) {
    const id = data.id;
    const domain = '';
    searchEngines[id] = data.searchEngine;
    await addNewSearchEngine(id, domain);
}

async function handleUpdateSearchOptions(data) {
    const options = await getOptions();
    options.exactMatch = data.exactMatch;
    await setOptions(options, true, false);
}

async function handleUpdateDisplayFavicons(data) {
    const options = await getOptions();
    options.displayFavicons = data.displayFavicons;
    await setOptions(options, true, true);
}

async function handleUpdateQuickIconGrid(data) {
    const options = await getOptions();
    options.quickIconGrid = data.quickIconGrid;
    await setOptions(options, true, false);
}

async function handleUpdateCloseGridOnMouseOut(data) {
    const options = await getOptions();
    options.closeGridOnMouseOut = data.closeGridOnMouseOut;
    await setOptions(options, true, false);
}

async function handleUpdateDisableAltClick(data) {
    const options = await getOptions();
    options.disableAltClick = data.disableAltClick;
    await setOptions(options, true, false);
}

async function handleUpdateTabMode(data) {
    const options = await getOptions();
    options.tabMode = data.tabMode;
    options.tabActive = data.tabActive;
    options.lastTab = data.lastTab;
    options.privateMode = data.privateMode;
    await setOptions(options, true, false);
}

async function handleUpdateMultiMode(data) {
    const options = await getOptions();
    options.multiMode = data.multiMode;
    await setOptions(options, true, false);
}

async function handleUpdateOptionsMenuLocation(data) {
    const options = await getOptions();
    options.optionsMenuLocation = data.optionsMenuLocation;
    await setOptions(options, true, true);
}

async function handleUpdateSiteSearchSetting(data) {
    const options = await getOptions();
    options.siteSearch = data.siteSearch;
    options.siteSearchUrl = data.siteSearchUrl;
    await setOptions(options, true, true);
}

async function handleUpdateResetOptions(data) {
    const options = await getOptions();
    options.forceSearchEnginesReload = data.resetOptions.forceSearchEnginesReload;
    options.resetPreferences = data.resetOptions.resetPreferences;
    options.forceFaviconsReload = data.resetOptions.forceFaviconsReload;
    await setOptions(options, true, false);
}

async function handleSaveSearchEnginesToDisk(data) {
    await browser.downloads.download({
        url: data,
        saveAs: true,
        filename: 'searchEngines.json',
    });
}

// Listen for messages from the content or options script
browser.runtime.onMessage.addListener((message, sender) => {
    const action = message.action;
    const data = message.data;
    switch (action) {
        case 'doSearch':
            handleDoSearch(data);
            break;
        case 'notify':
            if (notificationsEnabled) notify(data);
            break;
        case 'setSelection':
            if (data) selection = data.selection;
            if (debug) console.log(`Selected text: ${selection}`);
            break;
        case 'reset':
            handleReset();
            break;
        case 'setTargetUrl':
            if (debug) console.log(`TargetUrl: ${data}`);
            if (data) targetUrl = data;
            break;
        case 'testSearchEngine':
            testSearchEngine(data);
            break;
        case 'saveSearchEngines':
            handleSaveSearchEngines(data);
            break;
        case 'addNewSearchEngine':
            handleAddNewSearchEngine(data);
            break;
        case 'addNewPrompt':
            handleAddNewPrompt(data);
            break;
        case 'updateSearchOptions':
            handleUpdateSearchOptions(data);
            break;
        case 'updateDisplayFavicons':
            handleUpdateDisplayFavicons(data);
            break;
        case 'updateQuickIconGrid':
            handleUpdateQuickIconGrid(data);
            break;
        case 'updateCloseGridOnMouseOut':
            handleUpdateCloseGridOnMouseOut(data);
            break;
        case 'updateDisableAltClick':
            handleUpdateDisableAltClick(data);
            break;
        case 'updateTabMode':
            handleUpdateTabMode(data);
            break;
        case 'updateMultiMode':
            handleUpdateMultiMode(data);
            break;
        case 'updateOptionsMenuLocation':
            handleUpdateOptionsMenuLocation(data);
            break;
        case 'updateSiteSearchSetting':
            handleUpdateSiteSearchSetting(data);
            break;
        case 'updateResetOptions':
            handleUpdateResetOptions(data);
            break;
        case 'saveSearchEnginesToDisk':
            handleSaveSearchEnginesToDisk(data);
            break;
        case 'hidePageAction':
            browser.pageAction.hide(sender.tab.id);
            break;
        case 'showPageAction':
            browser.pageAction.show(sender.tab.id);
            break;
        default:
            break;
    }
});


/// Initialize extension
// Initialize search engines, only setting to default if not previously set
// Check if options are set in sync storage and set to default if not
async function init() {
    // Debug: verify that storage space occupied is within limits
    if (debug) {
        // Inform on storage space being used by storage sync
        const bytesUsed = await browser.storage.sync
            .getBytesInUse(null)
            .catch((err) => {
                console.error(err);
                console.log('Failed to retrieve storage space used by storage sync.');
            });
        console.log(`Bytes used by storage sync: ${bytesUsed} bytes.`);

        // Inform on storage space being used by local storage
        const items = await browser.storage.local.get(null);
        console.log(
            `Bytes used by local storage: ${JSON.stringify(items).length} bytes.`
        );
    }

    notificationsEnabled =
        (await navigator.permissions.query({ name: 'notifications' })).state ===
        'granted';

    // Fetch CORS API URL and key from config file
    const config = await fetchConfig();
    CORS_API_URL = config.API_URL;
    CORS_API_KEY = config.API_KEY;

    // Initialize options and search engines
    await initialiseOptionsAndSearchEngines();
}

/// Reset extension
// Resets the options to the default list if options.resetPreferences is set
// Resets the list of search engines to the default list if options.forceSearchEnginesReload is set
// Force favicons to be reloaded if options.forceFaviconsReload is set
async function reset() {
    if (debug) {
        console.log(
            "Resetting extension's preferences and search engines as per user reset preferences."
        );
    }
    await initialiseOptionsAndSearchEngines();
    return "resetCompleted";
}

async function addNewSearchEngine(id, domain) {
    const searchEngine = {};
    // Add a favicon to the search engine except if it's a separator
    if (!id.startsWith("separator-")) {
        const favicon = await getNewFavicon(id, domain);
        searchEngines[id]['imageFormat'] = favicon.imageFormat;
        searchEngines[id]['base64'] = favicon.base64;
    }
    searchEngine[id] = searchEngines[id];
    // Save the search engine to local storage
    await browser.storage.local.set(searchEngine);
    rebuildContextMenu();
    if (notificationsEnabled) notify(notifySearchEngineAdded);
}

function handlePageAction(tab) {
    let message = { action: 'getSearchEngine', data: '' };
    sendMessageToTab(tab, message);
}

async function initialiseOptionsAndSearchEngines() {
    /// Initialise options
    let options = {};
    let data = await browser.storage.sync.get(null).catch((err) => {
        if (debug) {
            console.error(err);
            console.log('Failed to retrieve data from storage sync.');
        }
    });

    if (data.options) {
        options = data.options;
        if (debug) console.log(options);
        delete data['options'];
    }

    // If there are no options stored in storage sync or reset preferences is set, then use default options
    // Otherwise clear storage sync and only save options in storage sync
    if (isEmpty(options) || options.resetPreferences) {
        options = defaultOptions;
    } else {
        await browser.storage.sync.clear();
    }
    if (debug) console.log(options);
    await setOptions(options, true, false);

    /// Initialise search engines
    // If there were search engines stored in storage sync (legacy), move them to storage local
    if (!isEmpty(data) && Object.keys(data).length > 1) {
        searchEngines = sortByIndex(data);
        setKeyboardShortcuts();
        if (debug) {
            console.log('Search engines: \n');
            console.log(searchEngines);
        }
        await browser.storage.local.clear();
        await getFaviconsAsBase64Strings();
        await saveSearchEnginesToLocalStorage(false);
    } else {
        // Check for search engines in local storage
        const se = await browser.storage.local.get(null);
        if (se === undefined || isEmpty(se) || contextsearch_forceSearchEnginesReload) {
            // Load default search engines if force reload is set or if no search engines are stored in local storage
            await browser.storage.local.clear();
            await loadDefaultSearchEngines(DEFAULT_SEARCH_ENGINES);
        } else {
            searchEngines = sortByIndex(se);
            setKeyboardShortcuts();
            await getFaviconsAsBase64Strings();
            await saveSearchEnginesToLocalStorage(true);
            rebuildContextMenu();
            if (debug) {
                console.log('Search engines: \n');
                console.log(searchEngines);
            }
        }
    }
}

function setKeyboardShortcuts() {
    for (let id in searchEngines) {
        if (searchEngines[id].keyboardShortcut !== undefined) continue;
        if (debug) console.log(`id: ${id}`);
        searchEngines[id]['keyboardShortcut'] = '';
        if (debug)
            console.log(`keyboard shortcut: ${searchEngines[id].keyboardShortcut}`);
    }
}

function getOptions() {
    return browser.storage.sync.get(null)
        .then(data => {
            const options = data.options;
            if (debug) console.log('Preferences retrieved from sync storage:');
            if (debug) console.log(options);
            return options;
        })
        .catch(err => {
            if (debug) {
                console.error(err);
                console.log('Failed to retrieve options from sync storage.');
            }
            return err;
        });
}

// Sets the default options if they haven't already been set in local storage and saves them
// The context menu is also rebuilt when required
function setOptions(options, save, rebuildContextMenu) {
    if (debug) console.log(`Setting exact match to ${options.exactMatch}`);
    contextsearch_exactMatch = options.exactMatch;

    if (debug) console.log('Setting tab mode..');
    contextsearch_makeNewTabOrWindowActive = options.tabActive;
    contextsearch_openSearchResultsInLastTab = options.lastTab;
    contextsearch_privateMode = options.privateMode;
    switch (options.tabMode) {
        case 'openNewTab':
            contextsearch_openSearchResultsInNewTab = true;
            contextsearch_openSearchResultsInNewWindow = false;
            contextsearch_openSearchResultsInSidebar = false;
            break;
        case 'sameTab':
            contextsearch_openSearchResultsInNewTab = false;
            contextsearch_openSearchResultsInNewWindow = false;
            contextsearch_openSearchResultsInSidebar = false;
            break;
        case 'openNewWindow':
            contextsearch_openSearchResultsInNewWindow = true;
            contextsearch_openSearchResultsInNewTab = false;
            contextsearch_openSearchResultsInSidebar = false;
            break;
        case 'openSidebar':
            contextsearch_openSearchResultsInSidebar = true;
            contextsearch_openSearchResultsInNewTab = false;
            contextsearch_openSearchResultsInNewWindow = false;
            break;
        default:
            break;
    }

    if (debug) console.log(
        `Setting the position of options in the context menu to ${options.optionsMenuLocation}`
    );
    contextsearch_optionsMenuLocation = options.optionsMenuLocation;

    if (debug) console.log('Setting favicons preference..');
    contextsearch_displayFavicons = options.displayFavicons;

    if (debug) console.log('Setting Icons Grid options..');
    contextsearch_quickIconGrid = options.quickIconGrid;
    contextsearch_closeGridOnMouseOut = options.closeGridOnMouseOut;
    contextsearch_disableAltClick = options.disableAltClick;

    if (debug) console.log('Setting site search option..');
    contextsearch_siteSearch = options.siteSearch;
    contextsearch_siteSearchUrl = options.siteSearchUrl;

    if (debug) console.log(`Setting reset options..`);
    contextsearch_forceSearchEnginesReload = options.forceSearchEnginesReload;
    contextsearch_resetPreferences = options.resetPreferences;
    contextsearch_forceFaviconsReload = options.forceFaviconsReload;

    contextsearch_multiMode = options.multiMode;

    if (save) {
        saveOptions(options, rebuildContextMenu);
    }

    return Promise.resolve();
}

function saveOptions(options, blnRebuildContextMenu) {
    return browser.storage.sync.set({ options })
        .then(() => {
            if (debug) console.log(options);
            if (blnRebuildContextMenu) rebuildContextMenu();
            if (debug) console.log('Successfully saved the options to storage sync.');
        })
        .catch(err => {
            if (debug) {
                console.error(err);
                console.log('Failed to save options to storage sync.');
            }
        });
}

/// Load default list of search engines
async function loadDefaultSearchEngines(jsonFile) {
    let reqHeader = new Headers();
    reqHeader.append('Content-Type', 'application/json');
    const initObject = {
        method: 'GET',
        headers: reqHeader,
    };
    let userRequest = new Request(jsonFile, initObject);
    try {
        const response = await fetch(userRequest);
        if (!response.ok) {
            const message = `The search engines could not be loaded. An error has occured: ${response.status}`;
            throw new Error(message);
        }
        const json = await response.json();
        searchEngines = sortByIndex(json);
        setKeyboardShortcuts();
        if (debug) {
            console.log('Search engines:\n');
            console.log(searchEngines);
        }
        await browser.storage.local.clear();
        await getFaviconsAsBase64Strings();
        await saveSearchEnginesToLocalStorage(true);
        rebuildContextMenu();
    } catch (error) {
        if (debug) console.error(error.message);
    }
}

async function saveSearchEnginesToLocalStorage(blnNotify) {
    searchEngines = sortByIndex(searchEngines);
    if (debug) {
        console.log('Search engines:\n');
        console.log(searchEngines);
    }

    try {
        // save list of search engines to local storage
        await browser.storage.local.set(searchEngines);
        if (notificationsEnabled && blnNotify) notify(notifySearchEnginesLoaded);
        if (debug) {
            console.log(
                'Search engines have been successfully saved to local storage.'
            );
        }
    } catch (error) {
        if (debug) {
            console.error(error.message);
            console.log('Failed to save the search engines to local storage.');
        }
    }
}

/// Fetch and store favicon image format and base64 representation to searchEngines
async function getFaviconsAsBase64Strings() {
    if (debug) console.log('Fetching favicons..');
    let arrayOfPromises = [];

    for (let id in searchEngines) {
        // If search engine is actually a separator
        if (id.startsWith('separator-')) continue;

        // Fetch a new favicon only if there is no existing favicon or if an favicon reload is being forced
        if (
            searchEngines[id].base64 === null ||
            searchEngines[id].base64 === undefined ||
            contextsearch_forceFaviconsReload
        ) {
            let domain;
            if (!id.startsWith('chatgpt-')) {
                const seUrl = searchEngines[id].url;
                domain = getDomain(seUrl);
                if (debug) console.log('id: ' + id);
                if (debug) console.log('url: ' + seUrl);
                if (debug) console.log('Getting favicon for ' + domain);
            }
            arrayOfPromises.push(await getNewFavicon(id, domain));
        }
    }

    if (arrayOfPromises.length > 0) {
        // values is an array of {id:, imageFormat:, base64:}
        const values = await Promise.all(arrayOfPromises).catch((err) => {
            if (debug) {
                console.error(err);
                console.log('Not ALL the favcions could be fetched.');
            }
            return;
        });
        if (debug) console.log('ALL promises have completed.');
        if (values === undefined) return;
        for (let value of values) {
            if (debug) {
                console.log('================================================');
                console.log('id is ' + value.id);
                console.log('------------------------------------------------');
                console.log('image format is ' + value.imageFormat);
                console.log('------------------------------------------------');
                console.log('base64 string is ' + value.base64);
                console.log('================================================');
            }
            searchEngines[value.id]['imageFormat'] = value.imageFormat;
            searchEngines[value.id]['base64'] = value.base64;
        }
        if (debug) console.log('The favicons have ALL been fetched.');
    }
}

async function getNewFavicon(id, domain) {
    if (id.startsWith('chatgpt-')) {
        return getFaviconForPrompt(id)
    }
    let reqHeader = new Headers();
    reqHeader.append('Content-Type', 'text/plain; charset=UTF-8');
    reqHeader.append('x-api-key', CORS_API_KEY);
    const initObject = {
        method: 'GET',
        headers: reqHeader,
    };
    const userRequest = new Request(CORS_API_URL + domain, initObject);
    try {
        const response = await fetch(userRequest);
        if (!response.ok) {
            const message = `Failed to get domain of search engine. An error has occured: ${response.status}`;
            throw new Error(message);
        }
        if (debug) console.log(response);
        const data = await response.json();
        let imageFormat = data.imageFormat;
        let b64 = data.b64;
        if (b64 === '') {
            b64 = base64ContextSearchIcon;
            imageFormat = 'image/png';
        }
        if (debug) console.log(imageFormat, b64);
        return { id: id, imageFormat: imageFormat, base64: b64 };
    } catch (error) {
        if (debug) console.error(error.message);
        if (debug) console.log('Failed to retrieve new favicon.');
        // Failed to retrieve a favicon, proceeding with default CS icon
        return { id: id, imageFormat: 'image/png', base64: base64ContextSearchIcon };
    }
}

function getFaviconForPrompt(id) {
    const provider = searchEngines[id].aiProvider;
    let imageFormat, b64;
    switch (provider) {
        case 'chatgpt':
            imageFormat = 'image/png';
            b64 = base64chatGPT;
            break;
        case 'bard':
            imageFormat = 'image/svg+xml';
            b64 = base64bard;
            break;
        case 'perplexity':
            imageFormat = 'image/png';
            b64 = base64perplexity;
            break;
        case 'llama2':
            imageFormat = 'image/jpg';
            b64 = base64llama2;
            break;
        case 'claude-instant':
            imageFormat = 'image/png';
            b64 = base64claude;
            break;
        case 'assistant':
            imageFormat = 'image/png';
            b64 = base64assistant;
            break;
        default:
            imageFormat = 'image/svg+xml';
            b64 = base64ContextSearchIcon;
    }
    return { id: id, imageFormat: imageFormat, base64: b64 };
}

function convertUrl2AbsUrl(href, domain) {
    let url = href;
    let absUrl = domain;
    let urlParts = [];

    // If the url is absolute, i.e. begins with either'http' or 'https', there's nothing to do!
    if (/^(https?:\/\/)/.test(url)) return url;

    if (url.includes('moz-extension://')) {
        let i = url.lastIndexOf('moz-extension://') + 16;
        url = url.substr(i);
        urlParts = url.split(/\//);
        urlParts.shift();
        for (let urlPart of urlParts) {
            absUrl += '/' + urlPart;
        }
        return absUrl;
    }

    // If url begins with '//'
    if (/^(\/\/)/.test(url)) {
        return 'https:' + url;
    }

    // If url is relative...
    // If url begings with either './' or '/' (excluding './/' or '//')
    if (/^([.]\/|\/)[^/]/.test(url)) {
        urlParts = url.split(/\//);
        urlParts.shift();
    } else if (/^[^/]/.test(url)) {
        // url does not begin with '/'
        urlParts = url.split(/\//);
    }
    for (let urlPart of urlParts) {
        absUrl += '/' + urlPart;
    }
    return absUrl;
}

/// Rebuild the context menu using the search engines from local storage
async function rebuildContextMenu() {
    if (debug) console.log('Rebuilding context menu..');
    const info = await browser.runtime.getBrowserInfo();
    const v = info.version;
    const browserVersion = parseInt(v.slice(0, v.search('.') - 1));

    browser.contextMenus.removeAll();
    browser.contextMenus.onClicked.removeListener(processSearch);

    if (contextsearch_optionsMenuLocation === 'top') {
        rebuildContextOptionsMenu();
    }

    buildContextMenuForImages();

    let n = Object.keys(searchEngines).length;
    for (let i = 1; i < n + 1; i++) {
        for (let id in searchEngines) {
            if (searchEngines[id].index === i) {
                if (debug) console.log(`Index: ${i}  id: ${id}`);
                if (id.startsWith("separator-")) {
                    browser.contextMenus.create({
                        id: 'cs-separator-' + i,
                        type: 'separator',
                        contexts: ['selection'],
                    });
                    break;
                }

                buildContextMenuItem(id, browserVersion);
            }
        }
    }

    if (contextsearch_optionsMenuLocation === 'bottom') {
        rebuildContextOptionsMenu();
    }

    browser.contextMenus.onClicked.addListener(processSearch);
}

function rebuildContextOptionsMenu() {
    if (contextsearch_optionsMenuLocation === 'bottom') {
        browser.contextMenus.create({
            id: 'cs-separator',
            type: 'separator',
            contexts: ['selection'],
        });
    }
    browser.contextMenus.create({
        id: 'cs-match',
        type: 'checkbox',
        title: titleExactMatch,
        contexts: ['selection'],
        checked: contextsearch_exactMatch,
    });
    browser.contextMenus.create({
        id: 'cs-multitab',
        title: titleMultipleSearchEngines,
        contexts: ['selection'],
    });
    browser.contextMenus.create({
        id: 'cs-site-search',
        title: `${titleSiteSearch} ${contextsearch_siteSearch}`,
        contexts: ['selection'],
    });
    browser.contextMenus.create({
        id: 'cs-options',
        title: titleOptions + '...',
        contexts: ['selection'],
    });
    if (contextsearch_optionsMenuLocation === 'top') {
        browser.contextMenus.create({
            id: 'cs-separator',
            type: 'separator',
            contexts: ['selection'],
        });
    }
}

/// Build the context menu for image searches
function buildContextMenuForImages() {
    browser.contextMenus.create({
        id: 'cs-reverse-image-search',
        title: 'Google Reverse Image Search',
        contexts: ['image'],
    });
    browser.contextMenus.create({
        id: 'cs-google-lens',
        title: 'Google Lens',
        contexts: ['image'],
    });
}

/// Build a single context menu item
function buildContextMenuItem(id, browserVersion) {
    const searchEngine = searchEngines[id];

    if (!searchEngine.show) return;

    const index = 'cs-' + id;
    const title = searchEngine.name;
    const imageFormat = searchEngine.imageFormat;
    const base64String = searchEngine.base64;
    const contexts = ['selection'];
    const faviconUrl = `data:${imageFormat};base64,${base64String}`;

    if (browserVersion >= 56 && contextsearch_displayFavicons === true) {
        browser.contextMenus.create({
            id: index,
            title: title,
            contexts: contexts,
            icons: { 20: faviconUrl },
        });
    } else {
        browser.contextMenus.create({
            id: index,
            title: title,
            contexts: contexts,
        });
    }
}

// Perform search based on selected search engine, i.e. selected context menu item
async function processSearch(info, tab) {
    if (debug) console.log(info);
    const id = info.menuItemId.replace('cs-', '');
    let tabIndex, tabPosition;

    if (info.selectionText !== undefined) {
        // Prefer info.selectionText over selection received by content script for these lengths (more reliable)
        if (info.selectionText.length < 150 || info.selectionText.length > 150) {
            selection = info.selectionText.trim();
        }
    }

    if (
        contextsearch_openSearchResultsInSidebar &&
        id !== 'reverse-image-search' &&
        id !== 'google-lens'
    ) {
        await browser.sidebarAction.open();
        await browser.sidebarAction.setPanel({ panel: '' });
    } else {
        await browser.sidebarAction.close();
        tabIndex = tab.index + 1;
    }
    const tabs = await browser.tabs.query({ currentWindow: true });
    tabPosition = tabs[tabs.length - 1].index + 1;
    if (contextsearch_openSearchResultsInLastTab) tabIndex = tabPosition;
    if (contextsearch_multiMode !== 'multiAfterLastTab') {
        tabPosition = tabIndex + 1;
    }
    if (id === 'reverse-image-search') {
        if (debug) console.log(targetUrl);
        displaySearchResults(googleReverseImageSearchUrl + targetUrl, tabIndex);
        return;
    }
    if (id === 'google-lens') {
        if (debug) console.log(targetUrl);
        displaySearchResults(googleLensUrl + targetUrl, tabIndex);
        return;
    }
    if (id === 'site-search' && !isEmpty(targetUrl)) {
        if (debug) console.log(targetUrl);
        if (contextsearch_openSearchResultsInSidebar) {
            const domain = getDomain(tab.url).replace(/https?:\/\//, '');
            const options = await getOptions();
            targetUrl =
                options.siteSearchUrl +
                encodeUrl(`site:https://${domain} ${selection}`);
            browser.sidebarAction.setPanel({ panel: targetUrl });
            browser.sidebarAction.setTitle({ title: 'Search results' });
            return;
        } else {
            displaySearchResults(targetUrl, tabIndex);
            return;
        }
    } else if (id === 'options') {
        browser.runtime.openOptionsPage().then(null, onError);
        return;
    } else if (id === 'multitab') {
        processMultiTabSearch([], tabPosition);
        return;
    } else if (id === 'match') {
        getOptions().then((settings) => {
            let options = settings.options;
            if (debug) {
                console.log(
                    `Preferences retrieved from sync storage: ${JSON.stringify(options)}`
                );
            }
            options.exactMatch = !contextsearch_exactMatch;
            if (options.exactMatch) {
                if (debug) console.log(`Setting exact match to ${options.exactMatch}`);
                contextsearch_exactMatch = options.exactMatch;
            }
            saveOptions(options, true);
        });
        return;
    }

    if (!id.startsWith("separator-")) {
        searchUsing(id, tabIndex);
    }
}

async function processMultiTabSearch(arraySearchEngineUrls, tabPosition) {
    const data = await browser.storage.local.get(null);
    searchEngines = sortByIndex(data);
    let multiTabSearchEngineUrls = [];
    if (arraySearchEngineUrls.length > 1) {
        multiTabSearchEngineUrls = arraySearchEngineUrls;
    } else {
        for (let id in searchEngines) {
            if (searchEngines[id].multitab) {
                multiTabSearchEngineUrls.push(
                    getSearchEngineUrl(searchEngines[id].url, selection)
                );
            }
        }
    }
    if (notificationsEnabled && isEmpty(multiTabSearchEngineUrls)) {
        notify('Search engines have not been selected for a multi-search.');
        return;
    }
    const n = multiTabSearchEngineUrls.length;
    if (debug) console.log(multiTabSearchEngineUrls);
    if (contextsearch_multiMode === 'multiNewWindow') {
        await browser.windows.create({
            titlePreface: windowTitle + "'" + selection + "'",
            url: multiTabSearchEngineUrls,
            incognito: contextsearch_privateMode,
        });
    } else {
        for (let i = 0; i < n; i++) {
            await browser.tabs.create({
                index: tabPosition + i,
                url: multiTabSearchEngineUrls[i],
            });
        }
    }
}

// Handle search terms if there are any
function getSearchEngineUrl(searchEngineUrl, sel) {
    let quote = '';
    if (contextsearch_exactMatch) quote = '%22';
    if (searchEngineUrl.includes('{searchTerms}')) {
        return searchEngineUrl.replace(/{searchTerms}/g, encodeUrl(sel));
    } else if (searchEngineUrl.includes('%s')) {
        return searchEngineUrl.replace(/%s/g, encodeUrl(sel));
    } else {
        return searchEngineUrl + quote + encodeUrl(sel) + quote;
    }
}

function searchUsing(id, tabIndex) {
    if (!id.startsWith('chatgpt-')) {
        const searchEngineUrl = searchEngines[id].url;
        targetUrl = getSearchEngineUrl(searchEngineUrl, selection);
    } else {
        targetUrl = getAIProviderBaseUrl(id);
    }
    if (debug) console.log(`Target url: ${targetUrl}`);
    if (contextsearch_openSearchResultsInSidebar) {
        browser.sidebarAction.setPanel({ panel: targetUrl + '#_sidebar' });
        browser.sidebarAction.setTitle({ title: 'Search results' });
        return;
    }
    displaySearchResults(id, targetUrl, tabIndex);
}

function getAIProviderBaseUrl(id) {
    const provider = searchEngines[id].aiProvider;
    let providerUrl;
    switch (provider) {
        case 'chatgpt':
            providerUrl = chatGPTUrl;
            break;
        case 'bard':
            providerUrl = googleBardUrl;
            break;
        case 'perplexity':
            providerUrl = perplexityAIUrl;
            break;
        case 'llama2':
            providerUrl = llama2Url;
            break;
        case 'claude-instant':
            providerUrl = claudeUrl;
            break;
        case 'assistant':
            providerUrl = assistantUrl;
            break;
        default:
            providerUrl = chatGPTUrl;
    }
    return providerUrl;
}

// Display the search results
async function displaySearchResults(id, targetUrl, tabPosition) {
    if (debug) console.log('Tab position: ' + tabPosition);
    const windowInfo = await browser.windows.getCurrent({ populate: false });
    const currentWindowID = windowInfo.id;
    if (id.startsWith('chatgpt-')) {
        const aiUrls = [chatGPTUrl, googleBardUrl, perplexityAIUrl, claudeUrl, assistantUrl];
        const urls = aiUrls.map((aiUrl) => {
            if (aiUrl.endsWith('/')) {
                return aiUrl + '*';
            } else {
                return aiUrl;
            }
        });
        const filter = {
            urls: urls
        }
        if (debug) console.log(filter);
        promptText = searchEngines[id].prompt;
        if (promptText.includes('{searchTerms}')) {
            promptText = promptText.replace(/{searchTerms}/g, selection);
        } else if (promptText.includes('%s')) {
            promptText = promptText.replace(/%s/g, selection);
        }
        if (debug) console.log(promptText);
        messageSent = false;
        browser.tabs.onUpdated.addListener(handleTabUpdate, filter);
    }
    if (contextsearch_openSearchResultsInNewWindow) {
        await browser.windows.create({
            url: targetUrl,
            incognito: contextsearch_privateMode,
        });
        if (!contextsearch_makeNewTabOrWindowActive) {
            await browser.windows.update(currentWindowID, { focused: true });
        }
    } else if (contextsearch_openSearchResultsInNewTab) {
        browser.tabs.create({
            active: contextsearch_makeNewTabOrWindowActive,
            index: tabPosition,
            url: targetUrl,
        });
    } else {
        // Open search results in the same tab
        if (debug) {
            console.log('Opening search results in same tab, url is ' + targetUrl);
        }
        browser.tabs.update({ url: targetUrl });
    }
}

async function tabUpdatedListener(changeInfo, tab, promptText) {
    if (changeInfo.status === 'complete') {
        sendMessageToTab(tab, { action: "askPrompt", data: { url: tab.url, prompt: promptText } });
        messageSent = true;
        browser.tabs.onUpdated.removeListener(handleTabUpdate);
    }
}

function handleTabUpdate(tabId, changeInfo, tab) {
    if (debug) console.log(promptText);
    if (!messageSent) tabUpdatedListener(changeInfo, tab, promptText);
}

/// OMNIBOX
// Provide help text to the user
browser.omnibox.setDefaultSuggestion({
    description: omniboxDescription,
});

// Update the suggestions whenever the input is changed
browser.omnibox.onInputChanged.addListener((input, suggest) => {
    if (input.indexOf(' ') > 0) {
        let suggestion = buildSuggestion(input);
        if (debug) console.log(JSON.stringify(suggestion));
        if (suggestion.length === 1) {
            suggest(suggestion);
        }
    }
});

// Open the page based on how the user clicks on a suggestion
browser.omnibox.onInputEntered.addListener(async (input) => {
    if (debug) console.log(input);
    const id = '';
    let tabIndex, tabPosition, tabId;

    const activeTab = await browser.tabs.query({
        currentWindow: true,
        active: true,
    });
    tabIndex = activeTab[0].index;
    tabId = activeTab[0].id;

    const tabs = await browser.tabs.query({ currentWindow: true });
    if (contextsearch_openSearchResultsInLastTab) {
        tabIndex = tabs.length + 1;
    }

    if (debug) console.log(contextsearch_multiMode);
    if (contextsearch_multiMode === 'multiAfterLastTab') {
        tabPosition = tabs.length + 1;
    } else {
        tabPosition = tabIndex + 1;
    }

    if (debug) console.log(tabPosition);
    if (debug) console.log(input.indexOf('://'));

    // Only display search results when there is a valid link inside of the url variable
    if (input.indexOf('://') > -1) {
        if (debug) console.log('Processing search...');
        displaySearchResults(id, input, tabIndex);
    } else {
        try {
            const keyword = input.split(' ')[0];
            const searchTerms = input.replace(keyword, '').trim();
            const suggestion = buildSuggestion(input);
            switch (keyword) {
                case '.':
                    browser.runtime.openOptionsPage();
                    break;
                case '!':
                    processMultiTabSearch([], tabPosition);
                    break;
                case 'bookmarks':
                case '!b':
                    if (searchTerms === 'recent') {
                        bookmarkItems = await browser.bookmarks.getRecent(10);
                    } else {
                        bookmarkItems = await browser.bookmarks.search({
                            query: searchTerms,
                        });
                    }
                    if (debug) console.log(bookmarkItems);
                    await browser.storage.local.set({
                        bookmarkItems: bookmarkItems,
                        searchTerms: searchTerms,
                    });
                    await browser.tabs.create({
                        active: contextsearch_makeNewTabOrWindowActive,
                        index: tabPosition,
                        url: '/bookmarks.html',
                    });
                    break;
                case 'history':
                case '!h':
                    historyItems = await browser.history.search({ text: searchTerms });
                    await browser.storage.local.set({
                        historyItems: historyItems,
                        searchTerms: searchTerms,
                    });
                    await browser.tabs.create({
                        active: contextsearch_makeNewTabOrWindowActive,
                        index: tabPosition,
                        url: '/history.html',
                    });
                    break;
                default:
                    if (suggestion.length > 1) {
                        let arraySearchEngineUrls = [];
                        for (const s of suggestion) {
                            arraySearchEngineUrls.push(s.content);
                        }
                        processMultiTabSearch(arraySearchEngineUrls, tabPosition);
                    }
                    else if (suggestion.length === 1) {
                        displaySearchResults(id, suggestion[0].content, tabIndex);
                    } else {
                        browser.search.search({ query: searchTerms, tabId: tabId });
                        if (notificationsEnabled) notify(notifyUsage);
                    }
                    break;
            }
        } catch (error) {
            if (debug) console.error(error);
            if (debug) console.log('Failed to process ' + input);
        }
    }
});

function buildSuggestion(text) {
    let result = [];
    let quote = '';

    if (contextsearch_exactMatch) quote = '%22';

    // Only make suggestions available and check for existence of a search engine when there is a space.
    if (text.indexOf(' ') === -1) {
        lastAddressBarKeyword = '';
        return result;
    }

    let keyword = text.split(' ')[0];
    let searchTerms = text.replace(keyword, '').trim();
    if (debug) console.log(searchTerms);

    // Don't notify for the same keyword
    let showNotification = true;
    if (lastAddressBarKeyword == keyword) showNotification = false;
    lastAddressBarKeyword = keyword;

    if (keyword === '!') {
        selection = searchTerms;
        let suggestion = [
            {
                content: '',
                description: 'Perform multisearch for ' + searchTerms,
            },
        ];
        return suggestion;
    } else if (keyword === '.') {
        let suggestion = [
            {
                content: '',
                description: 'Open options page',
            },
        ];
        return suggestion;
    } else if (keyword === '!b' || keyword === 'bookmarks') {
        let suggestion = [
            {
                content: '',
                description: 'Search bookmarks',
            },
        ];
        return suggestion;
    } else if (keyword === '!h' || keyword === 'history') {
        let suggestion = [
            {
                content: '',
                description: 'Search history',
            },
        ];
        return suggestion;
    }

    for (let id in searchEngines) {
        if (searchEngines[id].keyword === keyword) {
            let suggestion = {};
            let searchEngineUrl = searchEngines[id].url;
            if (searchEngineUrl.includes('{searchTerms}')) {
                targetUrl = searchEngineUrl.replace(
                    /{searchTerms}/g,
                    encodeUrl(searchTerms)
                );
            } else if (searchEngineUrl.includes('%s')) {
                targetUrl = searchEngineUrl.replace(/%s/g, encodeUrl(searchTerms));
            } else {
                targetUrl = searchEngineUrl + quote + encodeUrl(searchTerms) + quote;
            }
            suggestion['content'] = targetUrl;
            suggestion['description'] =
                'Search ' + searchEngines[id].name + ' for ' + searchTerms;
            if (debug) console.log(JSON.stringify(suggestion));
            result.push(suggestion);
        }
    }

    // If no known keyword was found
    if (notificationsEnabled && showNotification) {
        notify(notifySearchEngineWithKeyword + ' ' + keyword + ' ' + notifyUnknown);
    }

    return result;
}

/// Helper functions

// Test if a search engine performing a search for the keyword 'test' returns valid results
function testSearchEngine(engineData) {
    if (engineData.url != '') {
        let tempTargetUrl = getSearchEngineUrl(engineData.url, 'test');
        browser.tabs.create({
            url: tempTargetUrl,
        });
    } else if (notificationsEnabled) {
        notify(notifySearchEngineUrlRequired);
    }
}

/// Generic Error Handler
function onError(error) {
    if (debug) console.error(`${error}`);
}

/// Encode a url
function encodeUrl(url) {
    if (isEncoded(url)) {
        return url;
    }
    return encodeURIComponent(url);
}

/// Verify if uri is encoded
function isEncoded(uri) {
    let test = '';
    try {
        test = uri !== decodeURIComponent(uri);
        return test;
    } catch (e) {
        return false;
    }
}

/// Send message to content scripts
async function sendMessageToTab(tab, message) {
    const tabId = tab.id;
    await browser.tabs.sendMessage(tabId, message).catch((err) => {
        if (debug) {
            console.error(err);
            console.log(`Failed to send message ${JSON.stringify(message)} to:\n`);
            console.log(`Tab ${tab.id}: ${tab.title}\n`);
        }
        return;
    });
    if (debug) {
        console.log(`Successfully sent message to:\n`);
        console.log(`Tab ${tab.id}: ${tab.title}\n`);
    }
}

/// Send message to options page
async function sendMessageToOptionsPage(action, data) {
    await browser.runtime.sendMessage({ action: action, data: JSON.parse(JSON.stringify(data)) })
        .catch(e => {
            if (debug) console.error(e);
        });
}

/// Notifications
function notify(message) {
    browser.notifications.create(message.substring(0, 20), {
        type: 'basic',
        iconUrl: 'icons/icon_64.png',
        title: browser.i18n.getMessage('extensionName'),
        message: message,
    });
}

/// Get the domain of a given url
function getDomain(url) {
    let protocol = '';
    if (url.indexOf('://') !== -1) {
        protocol = url.split('://')[0] + '://';
    } else {
        // By default, set the protocol to 'https://' if it hasn't been set
        protocol = 'https://';
    }

    let urlParts = url
        .replace('http://', '')
        .replace('https://', '')
        .split(/[/?#]/);
    let domain = protocol + urlParts[0];
    return domain;
}

/// Sort search engines by index
function sortByIndex(list) {
    let sortedList = JSON.parse(JSON.stringify(list));
    let n = Object.keys(list).length;
    let arrayOfIndexes = [];
    let arrayOfIds = [];
    let min = 0;
    // Create the array of indexes and its corresponding array of ids
    for (let id in list) {
        if (debug) console.log(`id = ${id}`);
        // If there is no index, then move the search engine to the end of the list
        if (isEmpty(list[id].index)) {
            list[id].index = n + 1;
            n++;
        }
        arrayOfIndexes.push(list[id].index);
        arrayOfIds.push(id);
    }
    // Sort the list by index
    for (let i = 1; i < n + 1; i++) {
        min = Math.min(...arrayOfIndexes);
        let ind = arrayOfIndexes.indexOf(min);
        arrayOfIndexes.splice(ind, 1);
        let id = arrayOfIds.splice(ind, 1);
        sortedList[id].index = i;
    }

    return sortedList;
}

// Test if an object is empty
function isEmpty(value) {
    if (typeof value === 'number') return false;
    else if (typeof value === 'string') return value.trim().length === 0;
    else if (Array.isArray(value)) return value.length === 0;
    else if (typeof value === 'object') {
        return value === null || Object.keys(value).length === 0;
    } else if (typeof value === 'boolean') return false;
    else return !value;
}

// 
async function fetchConfig() {
    const response = await fetch(browser.runtime.getURL('config.json'));
    const config = await response.json();
    return config;
}

init();